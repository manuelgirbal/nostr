---
title: "Nostr report"
subtitle: "This report .... <subtitle>"
format: 
  live-html:
    logo: "logo.png"                                     # Optional. Path to a logo displayed above the title
    github-repo: "https://github.com/holtzy/lumo"        # Optional. Adds a github corner at the top right
    primary-color: "#69b3a2"
    self-contained: true
    #is-particlejs-enabled: true                          # Optional: display interactive particles in the document header
    bg-image: ""                                         # Optional: link to an image for the header background
engine: knitr
author: manuelgg
date: last-modified
webr:
    packages:
    - dplyr
    - ggplot2
    - DT
    # render-df: DT
---

{{< include ./_extensions/r-wasm/live/_knitr.qmd >}}

## Subt√≠tulo 1

Algo de texto; ac√° deber√≠a aparecer un output de c√≥digo en R sin ning√∫n formato adicional: `r 1+2`

### Cargamos datos

```{webr}
#| edit: false
#| include: false
#| cache: true

library(httr)
library(jsonlite)
library(dplyr)

########################################
##### From https://api.nostr.band/ #####
########################################

## Notes

# Define the URL
url <- "https://api.nostr.band/v0/trending/notes"

# Perform the GET request
response <- GET(url, add_headers(Accept = "application/json"))

# Check the status code
if (status_code(response) == 200) {
  # Parse the content of the response as JSON
  content_data <- content(response, as = "text", encoding = "UTF-8")
  
  # Convert the JSON content to a dataframe
  trending_notes <- as_tibble(fromJSON(content_data, flatten = TRUE)[[1]])
  
  # Print the dataframe
  print(trending_notes)
  
  # Optional: Save to CSV if needed
  # write.csv(data, "output.csv", row.names = FALSE)
} else {
  # Print the error message if the request fails
  print(paste("Request failed with status code", status_code(response)))
}


## Profiles

# Define the URL
url2 <- "https://api.nostr.band/v0/trending/profiles"

# Perform the GET request
response2 <- GET(url2, add_headers(Accept = "application/json"))

# Check the status code
if (status_code(response2) == 200) {
  # Parse the content of the response as JSON
  content_data2 <- content(response2, as = "text", encoding = "UTF-8")
  
  # Convert the JSON content to a dataframe
  trending_profiles <- as_tibble(fromJSON(content_data2, flatten = TRUE)[[1]])
  
  # Print the dataframe
  print(trending_profiles)
  
  # Optional: Save to CSV if needed
  # write.csv(data, "output.csv", row.names = FALSE)
} else {
  # Print the error message if the request fails
  print(paste("Request failed with status code", status_code(response2)))
}
```

```{webr}
datatable(trending_notes)
```

```{webr}
datatable(trending_profiles)
```

### Testeando webr

```{webr}
fit = lm(mpg ~ am, data = mtcars)
summary(fit)
plot(fit)
```

```{webr}
for (x in 1:5) {
  print(x ** 2)
}
```

#### Read - only cells 

```{webr}
#| edit: false

df <- data.frame(foo = c(1, 2, 3), bar = c(10, 20, 30))
df$foo
df$bar
```

#### Autorun

```{webr}
#| autorun: true

123 + 456
```


#### Inmediate execution

```{webr}
#| caption: Immediate Execution
#| autorun: true
#| runbutton: false
foo <- 123
bar <- 246
foo + bar
```

#### Context aware

```{webr}
#| autorun: true
#| completion: true
n_mean <- 120
n_sd <- 5

# Type "n_" to see context aware suggestions
```


#### Execution time limit

```{webr}
#| timelimit: 3
while (TRUE) {
  # Loop, infinitely
}
```

#### Editor height

```{webr}
#| min-lines: 6
#| max-lines: 10
x <- 173

y <- 205

x + y
```


#### Plots
```{webr}
#| fig-width: 8
#| fig-height: 4

ggplot(mtcars, aes(x = wt, y = mpg, group = am)) +
  geom_point(aes(color = cyl, shape = cyl)) +
  geom_smooth(method = lm, formula = y ~ x) +
  ggtitle("Motor Trend Car Road Tests üöÄ") +
  scale_shape_binned()
```


